def problem1():
    string1 = """(define (problem BLOCKS-3)
    (:domain CARDS)
    (:objects play discard - move
              n0 n1 n2 n3 n4 n5 n6 - number
              red white yellow green - colour
              )
    (:INIT
     (playable red n1) (playable white n1) (playable yellow n1)
     (playable green n1)
     (istime n1)
"""
    string2 = """     (tokens1 n1) (tokens2 n1)
     (succ n0 n1) (succ n1 n2) (succ n2 n3) (succ n3 n4) (succ n4 n5) (succ n5 n6)
     (samecolour red red) (samecolour white white) (samecolour yellow yellow)
     (samecolour green green)
	)
    (:goal """
    string3 = "))"
    return [string1,string2,string3]

def problem2():
    string1 = """(define (problem BLOCKS-3)
    (:domain CARDS)
    (:objects play discard - move
              n0 n1 n2 n3 n4 n5 n6 n7 n8 n9 n10 - number
              red white yellow green - colour
              )
    (:INIT 
     (playable red n1) (playable white n1) (playable yellow n1)
     (playable green n1)
     (istime n1)
"""
    string2 = """     (tokens1 n1) (tokens2 n1)
     (succ n0 n1) (succ n1 n2) (succ n2 n3) (succ n3 n4) (succ n4 n5) (succ n5 n6)
     (samecolour red red) (samecolour white white) (samecolour yellow yellow)
     (samecolour green green)
     (playable_copy red n1) (playable_copy white n1) (playable_copy yellow n1)
     (playable_copy green n1)
     (istime_copy n1)
     (tokens1_copy n1) (tokens2_copy n1)
     (succ_copy n0 n1) (succ_copy n1 n2) (succ_copy n2 n3) (succ_copy n3 n4) (succ_copy n4 n5) (succ_copy n5 n6)
     (samecolour_copy red red) (samecolour_copy white white) (samecolour_copy yellow yellow)
     (samecolour_copy green green)
	)
    (:goal """
    string3 = "))"
    return [string1,string2,string3]

def domain1():
    string1 = """(define (domain CARDS)
  (:requirements :strips)
  (:types move number colour - object)
  (:predicates (played1 ?move - move ?time - number)
               (played2 ?move - move ?time - number)
               (playable ?colour ?number)
               (istime ?time - number)
               (inhand1 ?colour - colour ?number - number ?index - number)
               (inhand2 ?colour - colour ?number - number ?index - number)
               (tokens1 ?number - number)
               (tokens2 ?number - number)
               (isfinished ?colour - colour)
               (succ ?numbera - number ?numberb - number)
               (samecolour ?coloura - colour ?colourb - colour)
               (failure)
               )

  (:action play_play
         :parameters (?time - number ?numa - number ?coloura - colour ?numb - number
                      ?colourb - colour)
         :precondition (AND (istime ?time) (inhand1 ?coloura ?numa ?time)
                            (inhand2 ?colourb ?numb ?time))
         :effect
         (AND (played1 play ?time)
           (played2 play ?time)
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n1 ?time))
                 (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n2)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n2 ?time))
                 (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n3)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n3 ?time))
                 (isfinished ?coloura))
                 
           (WHEN (AND (NOT (playable ?coloura ?numa))(NOT (tokens1 n0))) 
           (failure))
           
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n1 ?time)
                      (NOT(AND (playable ?coloura ?numa) (NOT (tokens1 n0))
                      (samecolour ?coloura ?colourb))))
                 (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n2)))
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n2 ?time)
                      (NOT(AND (playable ?coloura ?numa) (NOT (tokens1 n0))
                      (samecolour ?coloura ?colourb))))
                 (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n3)))
           (WHEN (AND (playable ?colourb ?numb) (NOT (tokens2 n0)) (inhand2 ?colourb n3 ?time))
                 (isfinished ?colourb))
                 
           (WHEN (AND (playable ?coloura ?numa) (NOT (tokens1 n0)) (inhand1 ?coloura n1 ?time)
                      (NOT (tokens2 n0)) (inhand2 ?coloura n2 ?time))
                 (AND(NOT(playable ?coloura n2)) (playable ?coloura n3)))
           (WHEN (AND (playable ?coloura ?numa) (NOT (tokens1 n0)) (inhand1 ?coloura n2 ?time)
                      (NOT (tokens2 n0)) (inhand2 ?coloura n3 ?time))
                 (isfinished ?coloura))
                 
           (WHEN (AND (NOT (playable ?colourb ?numb))(NOT (tokens2 n0))
                      (NOT(AND(playable ?coloura ?numa) (NOT (tokens1 n0)) (succ ?numa ?numb))))
           (failure))
           (WHEN (AND (playable ?colourb ?numb) (NOT (tokens2 n0)) (playable ?coloura ?numa)
           (NOT (tokens1 n0)) (samecolour ?coloura ?colourb) (NOT (playable ?colourb n3)))
           (failure))
           
           (WHEN (tokens1 n1) (AND (tokens1 n0)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n1)(NOT (tokens1 n2))))
           (WHEN (tokens1 n3) (AND (tokens1 n2)(NOT (tokens1 n3))))
           (WHEN (tokens2 n1) (AND (tokens2 n0)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n1)(NOT (tokens2 n2))))
           (WHEN (tokens2 n3) (AND (tokens2 n2)(NOT (tokens2 n3))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
              )
  )
    (:action discard_play
         :parameters (?time - number ?numb - number ?colourb - colour)
         :precondition (AND (istime ?time) (inhand2 ?colourb ?numb ?time))
         :effect
         (AND (played1 discard ?time)
           (played2 play ?time)
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n1 ?time))
           (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n2)))
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n2 ?time))
           (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n3)))
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n3 ?time))
           (isfinished ?colourb))
           
           (WHEN (AND (NOT (playable ?colourb ?numb))(NOT (tokens2 n0)))
           (failure))
           
           (WHEN (tokens1 n0) (AND (tokens1 n1)(NOT (tokens1 n0))))
           (WHEN (tokens1 n1) (AND (tokens1 n2)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n3)(NOT (tokens1 n2))))
           (WHEN (tokens2 n1) (AND (tokens2 n0)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n1)(NOT (tokens2 n2))))
           (WHEN (tokens2 n3) (AND (tokens2 n2)(NOT (tokens2 n3))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
              )
  )
    (:action play_discard
         :parameters (?time - number ?numa - number ?coloura - colour)
         :precondition (AND (istime ?time) (inhand1 ?coloura ?numa ?time))
         :effect
         (AND (played1 play ?time)
           (played2 discard ?time)
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n1 ?time))
;           (WHEN (AND (playable ?coloura ?numa)(tokens1 n1) (inhand1 ?coloura n1 ?time))
           (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n2)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n2 ?time))
           (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n3)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n3 ?time))
           (isfinished ?coloura))
           (WHEN (AND (NOT (playable ?coloura ?numa))(NOT (tokens1 n0)))
           (failure))
           (WHEN (tokens1 n1) (AND (tokens1 n0)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n1)(NOT (tokens1 n2))))
           (WHEN (tokens1 n3) (AND (tokens1 n2)(NOT (tokens1 n3))))
           (WHEN (tokens2 n0) (AND (tokens2 n1)(NOT (tokens2 n0))))
           (WHEN (tokens2 n1) (AND (tokens2 n2)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n3)(NOT (tokens2 n2))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
              )
  )
      (:action discard_discard
         :parameters (?time - number)
         :precondition (AND (istime ?time))
         :effect
         (AND (played1 discard ?time)
           (played2 discard ?time)
           (WHEN (tokens1 n0) (AND (tokens1 n1)(NOT (tokens1 n0))))
           (WHEN (tokens1 n1) (AND (tokens1 n2)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n3)(NOT (tokens1 n2))))
           (WHEN (tokens2 n0) (AND (tokens2 n1)(NOT (tokens2 n0))))
           (WHEN (tokens2 n1) (AND (tokens2 n2)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n3)(NOT (tokens2 n2))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
              )
  )
  )"""
    return string1

def domain2():
    string1 = """(define (domain CARDS)
  (:requirements :strips)
  (:types move number colour - object)
  (:predicates (played1 ?move - move ?time - number)
               (played2 ?move - move ?time - number)
               (playable ?colour ?number)
               (istime ?time - number)
               (inhand1 ?colour - colour ?number - number ?index - number)
               (inhand2 ?colour - colour ?number - number ?index - number)
               (tokens1 ?number - number)
               (tokens2 ?number - number)
               (isfinished ?colour - colour)
               (succ ?numbera - number ?numberb - number)
               (samecolour ?coloura - colour ?colourb - colour)
               (failure)
               (played1_copy ?move - move ?time - number)
               (played2_copy ?move - move ?time - number)
               (playable_copy ?colour ?number)
               (istime_copy ?time - number)
               (inhand1_copy ?colour - colour ?number - number ?index - number)
               (inhand2_copy ?colour - colour ?number - number ?index - number)
               (tokens1_copy ?number - number)
               (tokens2_copy ?number - number)
               (isfinished_copy ?colour - colour)
               (succ_copy ?numbera - number ?numberb - number)
               (samecolour_copy ?coloura - colour ?colourb - colour)
               (failure_copy)
               )

  (:action play_play
         :parameters (?time - number ?numa - number ?coloura - colour ?numb - number
                      ?colourb - colour)
         :precondition (AND (istime ?time) (inhand1 ?coloura ?numa ?time)
                            (inhand2 ?colourb ?numb ?time))
         :effect
         (AND (played1 play ?time)
           (played2 play ?time)
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n1 ?time))
                 (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n2)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n2 ?time))
                 (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n3)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n3 ?time))
                 (isfinished ?coloura))
                 
           (WHEN (AND (NOT (playable ?coloura ?numa))(NOT (tokens1 n0))) 
           (failure))
           
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n1 ?time)
                      (NOT(AND (playable ?coloura ?numa) (NOT (tokens1 n0))
                      (samecolour ?coloura ?colourb))))
                 (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n2)))
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n2 ?time)
                      (NOT(AND (playable ?coloura ?numa) (NOT (tokens1 n0))
                      (samecolour ?coloura ?colourb))))
                 (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n3)))
           (WHEN (AND (playable ?colourb ?numb) (NOT (tokens2 n0)) (inhand2 ?colourb n3 ?time))
                 (isfinished ?colourb))
                 
           (WHEN (AND (playable ?coloura ?numa) (NOT (tokens1 n0)) (inhand1 ?coloura n1 ?time)
                      (NOT (tokens2 n0)) (inhand2 ?coloura n2 ?time))
                 (AND(NOT(playable ?coloura n2)) (playable ?coloura n3)))
           (WHEN (AND (playable ?coloura ?numa) (NOT (tokens1 n0)) (inhand1 ?coloura n2 ?time)
                      (NOT (tokens2 n0)) (inhand2 ?coloura n3 ?time))
                 (isfinished ?coloura))
                 
           (WHEN (AND (NOT (playable ?colourb ?numb))(NOT (tokens2 n0))
                      (NOT(AND(playable ?coloura ?numa) (NOT (tokens1 n0)) (succ ?numa ?numb))))
           (failure))
           (WHEN (AND (playable ?colourb ?numb) (NOT (tokens2 n0)) (playable ?coloura ?numa)
           (NOT (tokens1 n0)) (samecolour ?coloura ?colourb) (NOT (playable ?colourb n3)))
           (failure))
           
           (WHEN (tokens1 n1) (AND (tokens1 n0)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n1)(NOT (tokens1 n2))))
           (WHEN (tokens1 n3) (AND (tokens1 n2)(NOT (tokens1 n3))))
           (WHEN (tokens2 n1) (AND (tokens2 n0)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n1)(NOT (tokens2 n2))))
           (WHEN (tokens2 n3) (AND (tokens2 n2)(NOT (tokens2 n3))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
           (WHEN (istime n6) (AND (istime n7) (NOT (istime n6))))
           (WHEN (istime n7) (AND (istime n8) (NOT (istime n7))))
           (WHEN (istime n8) (AND (istime n9) (NOT (istime n8))))
           (WHEN (istime n9) (AND (istime n10) (NOT (istime n9))))
              )
              )
  (:action play_play_copy
         :parameters (?time - number ?numa - number ?coloura - colour ?numb - number
                      ?colourb - colour)
         :precondition (AND (istime_copy ?time) (inhand1_copy ?coloura ?numa ?time)
                            (inhand2_copy ?colourb ?numb ?time))
         :effect
         (AND (played1_copy play ?time)
           (played2_copy play ?time)
           (WHEN (AND (playable_copy ?coloura ?numa)(NOT (tokens1_copy n0)) (inhand1_copy ?coloura n1 ?time))
                 (AND (NOT (playable_copy ?coloura ?numa)) (playable_copy ?coloura n2)))
           (WHEN (AND (playable_copy ?coloura ?numa)(NOT (tokens1_copy n0)) (inhand1_copy ?coloura n2 ?time))
                 (AND (NOT (playable_copy ?coloura ?numa)) (playable_copy ?coloura n3)))
           (WHEN (AND (playable_copy ?coloura ?numa)(NOT (tokens1_copy n0)) (inhand1_copy ?coloura n3 ?time))
                 (isfinished_copy ?coloura))
                 
           (WHEN (AND (NOT (playable_copy ?coloura ?numa))(NOT (tokens1_copy n0))) 
           (failure_copy))
           
           (WHEN (AND (playable_copy ?colourb ?numb)(NOT (tokens2_copy n0)) (inhand2_copy ?colourb n1 ?time)
                      (NOT(AND (playable_copy ?coloura ?numa) (NOT (tokens1_copy n0))
                      (samecolour_copy ?coloura ?colourb))))
                 (AND (NOT (playable_copy ?colourb ?numb)) (playable_copy ?colourb n2)))
           (WHEN (AND (playable_copy ?colourb ?numb)(NOT (tokens2_copy n0)) (inhand2_copy ?colourb n2 ?time)
                      (NOT(AND (playable_copy ?coloura ?numa) (NOT (tokens1_copy n0))
                      (samecolour_copy ?coloura ?colourb))))
                 (AND (NOT (playable_copy ?colourb ?numb)) (playable_copy ?colourb n3)))
           (WHEN (AND (playable_copy ?colourb ?numb) (NOT (tokens2_copy n0)) (inhand2_copy ?colourb n3 ?time))
                 (isfinished_copy ?colourb))
                 
           (WHEN (AND (playable_copy ?coloura ?numa) (NOT (tokens1_copy n0)) (inhand1_copy ?coloura n1 ?time)
                      (NOT (tokens2_copy n0)) (inhand2_copy ?coloura n2 ?time))
                 (AND(NOT(playable_copy ?coloura n2)) (playable_copy ?coloura n3)))
           (WHEN (AND (playable_copy ?coloura ?numa) (NOT (tokens1_copy n0)) (inhand1_copy ?coloura n2 ?time)
                      (NOT (tokens2_copy n0)) (inhand2_copy ?coloura n3 ?time))
                 (isfinished_copy ?coloura))
                 
           (WHEN (AND (NOT (playable_copy ?colourb ?numb))(NOT (tokens2_copy n0))
                      (NOT(AND(playable_copy ?coloura ?numa) (samecolour_copy ?coloura ?colourb) (NOT (tokens1_copy n0)) (succ_copy ?numa ?numb))))
           (failure_copy))
           (WHEN (AND (playable_copy ?colourb ?numb) (NOT (tokens2_copy n0)) (playable_copy ?coloura ?numa)
           (NOT (tokens1_copy n0)) (samecolour_copy ?coloura ?colourb) (NOT (playable_copy ?colourb n3)))
           (failure_copy))
           
           (WHEN (tokens1_copy n1) (AND (tokens1_copy n0)(NOT (tokens1_copy n1))))
           (WHEN (tokens1_copy n2) (AND (tokens1_copy n1)(NOT (tokens1_copy n2))))
           (WHEN (tokens1_copy n3) (AND (tokens1_copy n2)(NOT (tokens1_copy n3))))
           (WHEN (tokens2_copy n1) (AND (tokens2_copy n0)(NOT (tokens2_copy n1))))
           (WHEN (tokens2_copy n2) (AND (tokens2_copy n1)(NOT (tokens2_copy n2))))
           (WHEN (tokens2_copy n3) (AND (tokens2_copy n2)(NOT (tokens2_copy n3))))
           (WHEN (istime_copy n0) (AND (istime_copy n1) (NOT (istime_copy n0))))
           (WHEN (istime_copy n1) (AND (istime_copy n2) (NOT (istime_copy n1))))
           (WHEN (istime_copy n2) (AND (istime_copy n3) (NOT (istime_copy n2))))
           (WHEN (istime_copy n3) (AND (istime_copy n4) (NOT (istime_copy n3))))
           (WHEN (istime_copy n4) (AND (istime_copy n5) (NOT (istime_copy n4))))
           (WHEN (istime_copy n5) (AND (istime_copy n6) (NOT (istime_copy n5))))
           (WHEN (istime_copy n6) (AND (istime_copy n7) (NOT (istime_copy n6))))
           (WHEN (istime_copy n7) (AND (istime_copy n8) (NOT (istime_copy n7))))
           (WHEN (istime_copy n8) (AND (istime_copy n9) (NOT (istime_copy n8))))
           (WHEN (istime_copy n9) (AND (istime_copy n10) (NOT (istime_copy n9))))
              )
  )
    (:action discard_play_copy
         :parameters (?time - number ?numb - number ?colourb - colour)
         :precondition (AND (istime_copy ?time) (inhand2_copy ?colourb ?numb ?time))
         :effect
         (AND (played1_copy discard ?time)
           (played2_copy play ?time)
           (WHEN (AND (playable_copy ?colourb ?numb)(NOT (tokens2_copy n0)) (inhand2_copy ?colourb n1 ?time))
           (AND (NOT (playable_copy ?colourb ?numb)) (playable_copy ?colourb n2)))
           (WHEN (AND (playable_copy ?colourb ?numb)(NOT (tokens2_copy n0)) (inhand2_copy ?colourb n2 ?time))
           (AND (NOT (playable_copy ?colourb ?numb)) (playable_copy ?colourb n3)))
           (WHEN (AND (playable_copy ?colourb ?numb)(NOT (tokens2_copy n0)) (inhand2_copy ?colourb n3 ?time))
           (isfinished_copy ?colourb))
           
           (WHEN (AND (NOT (playable_copy ?colourb ?numb))(NOT (tokens2_copy n0)))
           (failure_copy))
           
           (WHEN (tokens1_copy n0) (AND (tokens1_copy n1)(NOT (tokens1_copy n0))))
           (WHEN (tokens1_copy n1) (AND (tokens1_copy n2)(NOT (tokens1_copy n1))))
           (WHEN (tokens1_copy n2) (AND (tokens1_copy n3)(NOT (tokens1_copy n2))))
           (WHEN (tokens2_copy n1) (AND (tokens2_copy n0)(NOT (tokens2_copy n1))))
           (WHEN (tokens2_copy n2) (AND (tokens2_copy n1)(NOT (tokens2_copy n2))))
           (WHEN (tokens2_copy n3) (AND (tokens2_copy n2)(NOT (tokens2_copy n3))))
           (WHEN (istime_copy n0) (AND (istime_copy n1) (NOT (istime_copy n0))))
           (WHEN (istime_copy n1) (AND (istime_copy n2) (NOT (istime_copy n1))))
           (WHEN (istime_copy n2) (AND (istime_copy n3) (NOT (istime_copy n2))))
           (WHEN (istime_copy n3) (AND (istime_copy n4) (NOT (istime_copy n3))))
           (WHEN (istime_copy n4) (AND (istime_copy n5) (NOT (istime_copy n4))))
           (WHEN (istime_copy n5) (AND (istime_copy n6) (NOT (istime_copy n5))))
           (WHEN (istime_copy n6) (AND (istime_copy n7) (NOT (istime_copy n6))))
           (WHEN (istime_copy n7) (AND (istime_copy n8) (NOT (istime_copy n7))))
           (WHEN (istime_copy n8) (AND (istime_copy n9) (NOT (istime_copy n8))))
           (WHEN (istime_copy n9) (AND (istime_copy n10) (NOT (istime_copy n9))))
              )
  )
    (:action discard_play
         :parameters (?time - number ?numb - number ?colourb - colour)
         :precondition (AND (istime ?time) (inhand2 ?colourb ?numb ?time))
         :effect
         (AND (played1 discard ?time)
           (played2 play ?time)
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n1 ?time))
           (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n2)))
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n2 ?time))
           (AND (NOT (playable ?colourb ?numb)) (playable ?colourb n3)))
           (WHEN (AND (playable ?colourb ?numb)(NOT (tokens2 n0)) (inhand2 ?colourb n3 ?time))
           (isfinished ?colourb))
           
           (WHEN (AND (NOT (playable ?colourb ?numb))(NOT (tokens2 n0)))
           (failure))
           
           (WHEN (tokens1 n0) (AND (tokens1 n1)(NOT (tokens1 n0))))
           (WHEN (tokens1 n1) (AND (tokens1 n2)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n3)(NOT (tokens1 n2))))
           (WHEN (tokens2 n1) (AND (tokens2 n0)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n1)(NOT (tokens2 n2))))
           (WHEN (tokens2 n3) (AND (tokens2 n2)(NOT (tokens2 n3))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
           (WHEN (istime n6) (AND (istime n7) (NOT (istime n6))))
           (WHEN (istime n7) (AND (istime n8) (NOT (istime n7))))
           (WHEN (istime n8) (AND (istime n9) (NOT (istime n8))))
           (WHEN (istime n9) (AND (istime n10) (NOT (istime n9))))
              )
  )
    (:action play_discard
         :parameters (?time - number ?numa - number ?coloura - colour)
         :precondition (AND (istime ?time) (inhand1 ?coloura ?numa ?time))
         :effect
         (AND (played1 play ?time)
           (played2 discard ?time)
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n1 ?time))
;           (WHEN (AND (playable ?coloura ?numa)(tokens1 n1) (inhand1 ?coloura n1 ?time))
           (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n2)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n2 ?time))
           (AND (NOT (playable ?coloura ?numa)) (playable ?coloura n3)))
           (WHEN (AND (playable ?coloura ?numa)(NOT (tokens1 n0)) (inhand1 ?coloura n3 ?time))
           (isfinished ?coloura))
           (WHEN (AND (NOT (playable ?coloura ?numa))(NOT (tokens1 n0)))
           (failure))
           (WHEN (tokens1 n1) (AND (tokens1 n0)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n1)(NOT (tokens1 n2))))
           (WHEN (tokens1 n3) (AND (tokens1 n2)(NOT (tokens1 n3))))
           (WHEN (tokens2 n0) (AND (tokens2 n1)(NOT (tokens2 n0))))
           (WHEN (tokens2 n1) (AND (tokens2 n2)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n3)(NOT (tokens2 n2))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
           (WHEN (istime n6) (AND (istime n7) (NOT (istime n6))))
           (WHEN (istime n7) (AND (istime n8) (NOT (istime n7))))
           (WHEN (istime n8) (AND (istime n9) (NOT (istime n8))))
           (WHEN (istime n9) (AND (istime n10) (NOT (istime n9))))
              )
  )
    (:action play_discard_copy
         :parameters (?time - number ?numa - number ?coloura - colour)
         :precondition (AND (istime_copy ?time) (inhand1_copy ?coloura ?numa ?time))
         :effect
         (AND (played1_copy play ?time)
           (played2_copy discard ?time)
           (WHEN (AND (playable_copy ?coloura ?numa)(NOT (tokens1_copy n0)) (inhand1_copy ?coloura n1 ?time))
;           (WHEN (AND (playable ?coloura ?numa)(tokens1 n1) (inhand1 ?coloura n1 ?time))
           (AND (NOT (playable_copy ?coloura ?numa)) (playable_copy ?coloura n2)))
           (WHEN (AND (playable_copy ?coloura ?numa)(NOT (tokens1_copy n0)) (inhand1_copy ?coloura n2 ?time))
           (AND (NOT (playable_copy ?coloura ?numa)) (playable_copy ?coloura n3)))
           (WHEN (AND (playable_copy ?coloura ?numa)(NOT (tokens1_copy n0)) (inhand1_copy ?coloura n3 ?time))
           (isfinished_copy ?coloura))
           (WHEN (AND (NOT (playable_copy ?coloura ?numa))(NOT (tokens1_copy n0)))
           (failure_copy))
           (WHEN (tokens1_copy n1) (AND (tokens1_copy n0)(NOT (tokens1_copy n1))))
           (WHEN (tokens1_copy n2) (AND (tokens1_copy n1)(NOT (tokens1_copy n2))))
           (WHEN (tokens1_copy n3) (AND (tokens1_copy n2)(NOT (tokens1_copy n3))))
           (WHEN (tokens2_copy n0) (AND (tokens2_copy n1)(NOT (tokens2_copy n0))))
           (WHEN (tokens2_copy n1) (AND (tokens2_copy n2)(NOT (tokens2_copy n1))))
           (WHEN (tokens2_copy n2) (AND (tokens2_copy n3)(NOT (tokens2_copy n2))))
           (WHEN (istime_copy n0) (AND (istime_copy n1) (NOT (istime_copy n0))))
           (WHEN (istime_copy n1) (AND (istime_copy n2) (NOT (istime_copy n1))))
           (WHEN (istime_copy n2) (AND (istime_copy n3) (NOT (istime_copy n2))))
           (WHEN (istime_copy n3) (AND (istime_copy n4) (NOT (istime_copy n3))))
           (WHEN (istime_copy n4) (AND (istime_copy n5) (NOT (istime_copy n4))))
           (WHEN (istime_copy n5) (AND (istime_copy n6) (NOT (istime_copy n5))))
           (WHEN (istime_copy n6) (AND (istime_copy n7) (NOT (istime_copy n6))))
           (WHEN (istime_copy n7) (AND (istime_copy n8) (NOT (istime_copy n7))))
           (WHEN (istime_copy n8) (AND (istime_copy n9) (NOT (istime_copy n8))))
           (WHEN (istime_copy n9) (AND (istime_copy n10) (NOT (istime_copy n9))))
              )
  )
      (:action discard_discard
         :parameters (?time - number)
         :precondition (AND (istime ?time))
         :effect
         (AND (played1 discard ?time)
           (played2 discard ?time)
           (WHEN (tokens1 n0) (AND (tokens1 n1)(NOT (tokens1 n0))))
           (WHEN (tokens1 n1) (AND (tokens1 n2)(NOT (tokens1 n1))))
           (WHEN (tokens1 n2) (AND (tokens1 n3)(NOT (tokens1 n2))))
           (WHEN (tokens2 n0) (AND (tokens2 n1)(NOT (tokens2 n0))))
           (WHEN (tokens2 n1) (AND (tokens2 n2)(NOT (tokens2 n1))))
           (WHEN (tokens2 n2) (AND (tokens2 n3)(NOT (tokens2 n2))))
           (WHEN (istime n0) (AND (istime n1) (NOT (istime n0))))
           (WHEN (istime n1) (AND (istime n2) (NOT (istime n1))))
           (WHEN (istime n2) (AND (istime n3) (NOT (istime n2))))
           (WHEN (istime n3) (AND (istime n4) (NOT (istime n3))))
           (WHEN (istime n4) (AND (istime n5) (NOT (istime n4))))
           (WHEN (istime n5) (AND (istime n6) (NOT (istime n5))))
           (WHEN (istime n6) (AND (istime n7) (NOT (istime n6))))
           (WHEN (istime n7) (AND (istime n8) (NOT (istime n7))))
           (WHEN (istime n8) (AND (istime n9) (NOT (istime n8))))
           (WHEN (istime n9) (AND (istime n10) (NOT (istime n9))))
              )
  )
      (:action discard_discard_copy
         :parameters (?time - number)
         :precondition (AND (istime_copy ?time))
         :effect
         (AND (played1_copy discard ?time)
           (played2_copy discard ?time)
           (WHEN (tokens1_copy n0) (AND (tokens1_copy n1)(NOT (tokens1_copy n0))))
           (WHEN (tokens1_copy n1) (AND (tokens1_copy n2)(NOT (tokens1_copy n1))))
           (WHEN (tokens1_copy n2) (AND (tokens1_copy n3)(NOT (tokens1_copy n2))))
           (WHEN (tokens2_copy n0) (AND (tokens2_copy n1)(NOT (tokens2_copy n0))))
           (WHEN (tokens2_copy n1) (AND (tokens2_copy n2)(NOT (tokens2_copy n1))))
           (WHEN (tokens2_copy n2) (AND (tokens2_copy n3)(NOT (tokens2_copy n2))))
           (WHEN (istime_copy n0) (AND (istime_copy n1) (NOT (istime_copy n0))))
           (WHEN (istime_copy n1) (AND (istime_copy n2) (NOT (istime_copy n1))))
           (WHEN (istime_copy n2) (AND (istime_copy n3) (NOT (istime_copy n2))))
           (WHEN (istime_copy n3) (AND (istime_copy n4) (NOT (istime_copy n3))))
           (WHEN (istime_copy n4) (AND (istime_copy n5) (NOT (istime_copy n4))))
           (WHEN (istime_copy n5) (AND (istime_copy n6) (NOT (istime_copy n5))))
           (WHEN (istime_copy n6) (AND (istime_copy n7) (NOT (istime_copy n6))))
           (WHEN (istime_copy n7) (AND (istime_copy n8) (NOT (istime_copy n7))))
           (WHEN (istime_copy n8) (AND (istime_copy n9) (NOT (istime_copy n8))))
           (WHEN (istime_copy n9) (AND (istime_copy n10) (NOT (istime_copy n9))))
              )
  )
  )"""
    return string1